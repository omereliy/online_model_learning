name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Linting and code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy

      - name: Format check with black
        run: black --check src/ tests/
        continue-on-error: true

      - name: Lint with flake8
        run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203
        continue-on-error: true

  # Unit tests (fast, no external dependencies)
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-timeout

      - name: Clone OLAM repository
        run: |
          cd $HOME
          git clone https://github.com/LamannaLeonardo/OLAM.git || true
          echo "PYTHONPATH=$HOME/OLAM:$PYTHONPATH" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          pytest tests/test_cnf_manager.py \
                 tests/test_pddl_handler.py \
                 tests/test_metrics.py \
                 tests/test_experiment_runner.py \
                 -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Integration tests with Docker
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Build Docker image
        run: |
          docker compose build test

      - name: Run integration tests in Docker
        run: |
          docker compose run test

      - name: Clean up Docker
        if: always()
        run: |
          docker compose down -v

  # Test with external dependencies
  full-tests:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential default-jdk

      - name: Cache planners
        uses: actions/cache@v3
        with:
          path: |
            ~/fast-downward
            ~/VAL
          key: ${{ runner.os }}-planners-${{ hashFiles('.github/workflows/ci.yml') }}

      - name: Install Fast Downward
        run: |
          if [ ! -d "$HOME/fast-downward" ]; then
            cd $HOME
            git clone https://github.com/aibasel/downward.git fast-downward
            cd fast-downward
            python build.py
          fi
          echo "FAST_DOWNWARD_PATH=$HOME/fast-downward" >> $GITHUB_ENV

      - name: Install VAL
        run: |
          if [ ! -d "$HOME/VAL" ]; then
            sudo apt-get update && sudo apt-get install -y flex bison
            cd $HOME
            git clone https://github.com/KCL-Planning/VAL.git
            cd VAL
            mkdir build && cd build
            cmake -DCMAKE_BUILD_TYPE=Release ..
            make -j$(nproc)
            sudo make install
          fi
          echo "VAL_PATH=$HOME/VAL/bin" >> $GITHUB_ENV
          echo "$HOME/VAL/bin" >> $GITHUB_PATH

      - name: Clone external repositories
        run: |
          cd $HOME
          git clone https://github.com/LamannaLeonardo/OLAM.git || true
          # ModelLearner repo not accessible - commenting out until fixed
          # git clone https://github.com/kcleung/ModelLearner.git || true
          echo "PYTHONPATH=$HOME/OLAM:$PYTHONPATH" >> $GITHUB_ENV

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-timeout

      - name: Run all tests
        run: |
          pytest tests/ -v --tb=short --timeout=300

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build development image
        run: |
          docker build --target development -t olam-dev:latest .

      - name: Build testing image
        run: |
          docker build --target testing -t olam-test:latest .

      - name: Build production image
        run: |
          docker build --target production -t olam-prod:latest .

      - name: Test images
        run: |
          docker run --rm olam-test:latest pytest --version
          docker run --rm olam-dev:latest python -c "import src.core.cnf_manager"
          docker run --rm olam-prod:latest python -c "import src.algorithms.base_learner"

  # Documentation check
  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check documentation files
        run: |
          required_docs=(
            "README.md"
            "CLAUDE.md"
            "docs/DEVELOPMENT_RULES.md"
            "docs/IMPLEMENTATION_TASKS.md"
          )

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "Missing required documentation: $doc"
              exit 1
            fi
          done

          echo "All required documentation present"

# Deployment job (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, docker-build, docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy notification
        run: |
          echo "Deployment would happen here for production"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"